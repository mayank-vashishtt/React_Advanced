react tutorial 

https://courses.chaicode.com/learn


learn react after only mastering js 

facebook have ghost message problem(phantom problem) -- no consistency in UI 

react sync the JS and DOM , state and UI 

react is library 

framework == military  --> rules are strict 
library == cool dude 

UI manipulation, JSX
component resusability 
props 
hooks

react dont have build in router -- download react-router-dom 
state management, redux react, redux toolkit, zustand, context API 
class based component  -- legacy code 
BAAS Apps -- social media clone, <backend as a service>
appwrite is a baas


after react (no SEO, browser render of JS, no routing)
these framework -- nextJS, gatsby , remix, freeAPI.app(chai and code)


NOTES  



vite application / parcel are bundlers --  npm create vite@latest -- quite fast --- brought on file but didnt install , do npm i  -- npm run dev(dev is script name in package.json)


CRA(create-react-app) vs vite

npx create-react-app -- it is little bit bulky  -- npx create-react-app basicrect  --- OG , installed it  -- npm run start 


react -- react-dom(talk to my dom in my browser), react-native(talk to mobile), 3D application to here


build command are used to deploy these on vercel or netify 

react app is called spa -- single page applcation 

in jsx you can return only one element, use parent and child relation or <> </> use this 

in vite, you should use jsx for return like thing and function name should be in capital even having filename in capital is good practice 

in vite, there is manual script and in cra there is custom script

if you give hello {usename} --- will take username from inside that function 

use state -- first one is variable .. second one is method 

batching -- to avoid it use callbacks 

react fiber architecture  -- read docs

reconcilliation -- read docs

tailwind css

we have to install all npm and all lib that we need in root dir where package.json is 

 

 -------- 



 react is the most used and famous js library 


 --- react js with the help of cdn in html css and js code
 dom 

var root = document.querySelector('#root')
var h1= document.createElement('h1')
h1.innerHTML = 'hello from JS' 
root.appendChild(h1)


web app --- react dom and react library 


why react work on virutal DOM 

The real DOM is not used directly for updates in React due to several reasons:

Performance: The real DOM is slow to update. Each change to the DOM can cause the browser to re-render the entire page, which is 
computationally expensive and can lead to performance bottlenecks.

Inefficiency: Direct manipulation of the real DOM can be inefficient, especially when dealing with frequent updates. 
Each change triggers a reflow and repaint, which can degrade performance.

Complexity: Managing the state and updates directly on the real DOM can be complex and error-prone. 
The virtual DOM abstracts this complexity, making it easier to reason about state changes and updates.

Batching: The virtual DOM allows React to batch updates and apply them in a single operation, reducing the number of reflows and repaints.

Virtual DOM: React creates an in-memory representation of the real DOM called the virtual DOM. This is a lightweight copy of the actual DOM.

Efficient Updates: When the state of a component changes, React updates the virtual DOM first. It then compares the virtual DOM with 
a snapshot of the previous virtual DOM (a process called "diffing").

Minimal Changes: After identifying the differences, React calculates the most efficient way to update the real DOM. 
This minimizes the number of changes needed, which improves performance.

Batch Updates: React batches multiple updates together to reduce the number of re-renders, further enhancing performance.

-----
cdn 

React.createElement('h1', null(property), "hello from React" )

var parent = React.querySelector('#parent')

var root = ReactDOM.createRoot(parent)

root.render(h1)


-----


npm create react-app 

npm create vite

vite is a bundler that helps us to make react js folder

JSX -- Javascript XML -- combination of JS and HTML 


//rafce


strict mode come in use during production time 


hooks -- are special type of function that provide powerful feature in react like state management 

fragments are empty tags like this <> </> use in place of div in react they work like an wrapper 


------


axios 
it is the tool that help us to call apis 
data comes in the form of promises 


--- 
react router dom 


----
context API 
it is used to centralised the data 
used is big size application or medium may be 
it is built-in react 


------

useEffect 
basically handles work in sideline 
The useEffect hook lets you perform side effects in functional components. Side effects can include:

Fetching data from an API.
Updating the DOM.
Setting up subscriptions or timers.
Essentially, useEffect allows your component to do something after rendering.


useEffect(() => {
  // Your code here (side effect logic)
}, [dependencies]);


Breaking it Down
Callback Function:

The first argument is a function where you put your side effect code.
This function runs after the component renders.
Dependency Array:

The second argument is an array of dependencies.
It tells React when to run the effect. If the value of any dependency changes, the effect runs again.


When to Use useEffect
1. Run Once After Initial Render
Use an empty dependency array []. This is similar to componentDidMount in class components.
useEffect(() => {
  console.log("Component mounted");
}, []); // Runs only once

2. Run After Every Render
If no dependency array is provided, the effect runs after every render.
useEffect(() => {
  console.log("Component rendered");
});

3. Run Only When Certain Values Change
Add specific variables in the dependency array. The effect will run when those variables change.
useEffect(() => {
  console.log("The count changed:", count);
}, [count]); // Runs only when `count` changes

------

useRef

What is useRef?
Think of useRef as a "box" you can use to store something (like a DOM element or a value).
This "box" holds onto its value even if your component re-renders.
Changing the value inside the box does not make your component re-render.

Why Use useRef?
Access an HTML element directly (like focusing an input field or scrolling to a section).
Store a value that you don’t want React to track or re-render for, like a timer ID or a count.


import { useRef } from "react";

const ref = useRef(initialValue);
ref.current is where the value is stored.
You can read or update this value whenever you want.


import { useRef } from "react";

function App() {
  const inputRef = useRef(null); // Create a "box" to store the input element

  const focusInput = () => {
    inputRef.current.focus(); // Use the box to access the input and focus it
  };

  return (
    <div>
      <input ref={inputRef} type="text" placeholder="Type here..." />
      <button onClick={focusInput}>Focus Input</button>
    </div>
  );
}

What’s Happening?
useRef creates a box (inputRef).
The ref connects this box to the <input>.
When you click the button, the box (inputRef.current) lets you focus the input.


2. Keep Track of a Value Without Re-rendering
Sometimes, you need to track something (like a counter) but don’t want the component to re-render when it changes.


Key Points to Remember
useRef doesn’t trigger re-renders: Updating ref.current won’t make your component update.
It’s like a persistent "box": The value in the box stays the same even if your component updates.
Use it for special cases:
Directly interacting with HTML elements (like focusing).
Storing things like timer IDs or previous values.
